from Crypto.Util.number import getPrime, inverse
from random import randint
from math import lcm

L = lambda x : (x-1)//n

p, q = getPrime(512), getPrime(512)
n = p*q
n2 = n*n
phi = lcm(p-1, q-1)
g = n + 1
mu = inverse(L(pow(g, phi, n**2)), n)
m = open('flag.txt', 'rb').read()
m = int.from_bytes(m, "big")


def encrypt(m, n, g, p):
    r = randint(2, n)
    r = L(pow(g, r*p, n2))
    c = (pow(g, m, n2) * pow(r, n, n2)) % n2
    return c


c1 = encrypt(m, n, g, p)

# I heard from the organisers that this might be too hard, 
# so here's an old school RSA encrypted flag for you!
c2 = pow(m, 0x10001, n)

print(f'{n2 = }')
print(f'{g = }')
print(f'{c1 = }')
print(f'{c2 = }')

"""
n2 = 5095235196728201939498286785498664391901515006580285203849306403644345905220575912476717266038206683147320959198955353705928516687807768022279269909681284113178427002786798809015719344036930153586254055400535183830504526854730153875033832656009899443059866286949705170727543697065118929193754082181955231585262132697149250963903542748404134099820291423301389065808385633376117750151671046491309606894612420824254139274964751057461787540293649442882733894415503898769539404665561387788582922896657064304069032886392705837329580588350566394216313659570681849365202477979552911156712463157959324951847207526673207419561
g = 71380916194233609314929439949986211223821786252293887285285434101928208932766669995327297713037556308915608721133682052422446597245530366381824830433166311910582462832565788036756826084597207389948484293447285630780722681629778321241543695041896845732998804613373702740354293515476730066384547592280395494670
c1 = 1321679159315012505540604962392325301609239157639975900386666956949607079454685994035052205644617960838855413701169792416766597768898351520990717336949466158812974280217747026155692725517298805053127472569841026837094047757840515699903879829949456457293959681298913393614561591244864161785126296860115942362379327572559217306865302248184783031832828514420794561665716346682500780563704762833812017824858612978573320188282394281617475884609488667443782360132731332211486768879616521086061199285326520855234613883547672653437300211965853563012919753827537644598952150183192984868551672575729290036226524622934665055936
c2 = 12630262384114834606077020612297127672134248023336496273898192224175769713274014042155966262993826136740768739405838636877370227568177893834262744459248401842907194720834052327990257772498005763210537926593881243082935560775027352378991993113645773896664529304677041109060999130100249915255167978167252368250
"""