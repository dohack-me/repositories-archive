from Crypto.Util.number import *

a = 314159
b = 271828
p = 62378614932334187184414530320857436260024498342816529064327089839152687534143
T = (14951441692002637926292472758721615040637107908195357266714891835517518317937649857830064844396981099106478802308996417417031746996432750335733180035919339229956650533547166154996409643825054190640168401796583896111134447241895701574001895194447597033615286665225556880067019988842955816906820309128578010649, 7914367840062961447403707002967579183037234148022678704832480655257342059705046621330918510661182829226868956363651590279406478461497444282053158420953168054472521266278716661713382097334111916591296074158869232093843082355121812553693987220354876506830345580857008722082187542167666238667061513420901756956)

z = ceil(T[0].log(p).n())

Zpz = Zmod(p^z)
EZpz = EllipticCurve(Zpz, (a, b))

S = EZpz.lift_x(2147483647)

Qp = Qp(p)
EQp = EZpz.change_ring(Qp)

Fp = GF(p)
EFp = EZpz.change_ring(Fp)
N = EFp.order()

S = EQp(S[0], S[1])
T = EQp(T[0], T[1])

NS = N * S
a = Fp(-NS[0] / (p * NS[1]))

n = 1
S_ = S
T_ = T
ds = []
while T_ != 0:
    NT_ = N * T_
    w = -NT_[0] / NT_[1]
    b = w / p^n
    d = ZZ(ZZ(b)/a)
    ds.append(d)
    T_ = T_ - d*S_
    S_ = p * S
    n += 1
    if n == z: break

flag = 0
for i, d in enumerate(ds):
    flag += d * p^i

print(long_to_bytes(flag))
# b'blahaj{3x73nd3D_an0Mal0u5_cURV3_a77ACK_0n_F13LD_0F_P-aD1c_nUMb3r5}'